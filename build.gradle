/*
 * @(#)build.gradle
 *
 * Copyright C.T.Co Ltd, 15/25 Jurkalnes Street, Riga LV-1046, Latvia. All rights reserved.
 */

buildscript {
    //old approach to use dependencies, as gradle-nexus-staging-plugin isn't published to gradle.org plugins.
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath "net.researchgate:gradle-release:2.3.5"
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
	mavenCentral()
}

dependencies {
	/*
	 * Note that for now, this jar only contains the ShortTypeHandlingClass. Future versions may include more.
	 * http://glaforge.appspot.com/article/groovy-2-3-5-out-with-upward-compatibility
	 * Required for logic that checks for actual and required Gradle versions when executing on Gradle 1.x
	 */
	compile group: 'org.codehaus.groovy', name: 'groovy-backports-compat23', version:'2.3.5'

	compile group: 'jparsec', name: 'jparsec', version: '2.0.1' // Used for sln and csproj file parsing
	compile group: 'com.googlecode.plist', name: 'dd-plist', version: '1.8'

	compile group: 'commons-collections', name:'commons-collections', version:'3.2.2'
	compile group: 'commons-io', name: 'commons-io', version:'2.4'
	compile group: 'org.apache.commons', name:'commons-compress', version:'1.10'
	compile group: 'org.apache.commons', name:'commons-exec', version:'1.3'
	compile group: 'org.apache.commons', name:'commons-lang3', version:'3.4'

	/* Dependencies for Knappsack upload functionality. */
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
	compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.4'
	compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.1'

	/* Dependencies for gradle plugin development. */
	compile gradleApi()
	compile localGroovy()

	/* Dependencies for testing functionality. */
	testCompile group: 'org.gmock', name: 'gmock', version: '0.8.3'
}

group = 'lv.ctco.scm'
archivesBaseName = 'gradle-mobile-plugin'

test {
	useJUnit()
}

// Custom functionality for plugin configuration

def writePluginInfo() {
	println("Writing plugin info properties...")
	Properties pluginInfoProperties = new Properties()
	pluginInfoProperties.setProperty('plugin-group', group.toString())
	pluginInfoProperties.setProperty('plugin-name', archivesBaseName)
	pluginInfoProperties.setProperty('plugin-version', version.toString())
	File pluginInfoFile = new File('build/resources/main/plugin-info.properties')
	pluginInfoProperties.store(pluginInfoFile.newWriter(), null)
}

processResources.doLast {
	println(':processResources.doLast')
	writePluginInfo()
}

// Custom functionality for Teamcity integration

task projectInfo << {
	println "Project version: "+project.getVersion()
	String version_iteration = project.version.minus("-SNAPSHOT")
	println "Release version: $version_iteration"
	String vcs_number = "$System.env.BUILD_VCS_NUMBER"
	if (vcs_number.length() == 40) {
	    vcs_number = vcs_number.substring(0,7)
	}
	println "Project revision: "+vcs_number
	println "##teamcity[buildNumber \'"+version_iteration+"_"+vcs_number+"\']"
	println "##teamcity[setParameter name=\'build.number\' value=\'"+version_iteration+"_"+vcs_number+"\']"
	println "##teamcity[setParameter name=\'project.version.iteration\' value=\'"+version_iteration+"\']"
}

// Configuration for artifact signing and publishing

def hasSigningProperties = project.hasProperty("signing.keyId") && project.hasProperty("signing.password") && project.hasProperty("signing.secretKeyRingFile")

signing {
    required { hasSigningProperties && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def ossrhUsername="null"
if (project.hasProperty("ossrhUsername")) {
    ossrhUsername=project.get("ossrhUsername")
}
def ossrhPassword="null"
if (project.hasProperty("ossrhPassword")) {
    ossrhPassword=project.get("ossrhPassword")
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
    }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'C.T.Co Mobile Plugin for Gradle'
        packaging 'jar'
        description 'The C.T.Co Mobile Plugin for Gradle helps you to configure and build Xcode and Xamarin (iOS, Android) apps.'
        url 'https://github.com/ctco/gradle-mobile-plugin'

        scm {
          connection 'scm:git:git@github.com:ctco/gradle-mobile-plugin.git'
          developerConnection 'scm:git:git@github.com:ctco/gradle-mobile-plugin.git'
          url 'https://github.com/ctco/gradle-mobile-plugin'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'Quesar'
            name 'Ivars Bērziņš'
            email 'Ivars.Berzinsh@ctco.lv'
          }
        }
      }
    }
  }
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = false
    failOnUpdateNeeded = true
    revertOnFail = true
    preTagCommitMessage = '[Gradle Release Plugin] [skip ci] - pre tag commit: '
    newVersionCommitMessage = '[Gradle Release Plugin] [skip ci] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
}

nexusStaging {
    packageGroup = "lv.ctco"
}

afterReleaseBuild.dependsOn uploadArchives
